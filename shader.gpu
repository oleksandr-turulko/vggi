// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;
uniform vec3 lightPosition;
varying vec3 varColor;

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec4 lightPos4 = ModelViewProjectionMatrix * vec4(lightPosition, 1.0);
    vec3 lightPos = vec3(lightPos4) / lightPos4.w;
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec4 norm = NormalMatrix*vec4(normal,1.0);
    vec3 N = normalize(vec3(norm));
    vec3 L = normalize(lightPos - vertPos);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    vec3 R = reflect(-L, N);      // Reflected light vector
    vec3 V = normalize(-vertPos); // Vector to viewer
    // Compute the specular term
    float specAngle = max(dot(R, V), 0.0);
    specular = pow(specAngle, 80.0);
    vec3 ambientColor = vec3(0.0,0.1,0.0);
    vec3 diffuseColor = vec3(0.0,0.7,0.0);
    vec3 specularColor = vec3(0.0,1.0,0.0);
    varColor = vec3(ambientColor +
                lambertian * diffuseColor +
                specular * specularColor);
   gl_Position = vertPos4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 varColor;

void main() {
    gl_FragColor = vec4(varColor, 1.0);
}`;